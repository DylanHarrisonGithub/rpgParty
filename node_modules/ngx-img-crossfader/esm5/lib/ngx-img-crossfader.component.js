/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
var NgxImgCrossfaderComponent = /** @class */ (function () {
    function NgxImgCrossfaderComponent() {
        this.initDelayMS = 0;
        this.idleTimeMS = 5000;
        this.transitionTimeMS = 1000;
        this.autoAdvance = true;
        this.imageSources = [];
        this.backgroundColor = 'rgba(0,0,0,1.0)';
        this.img1Num = 0;
        this.img2Num = 1;
    }
    /**
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.div = (/** @type {?} */ (this.bkgCrossfaderDiv.nativeElement));
        this.img1 = (/** @type {?} */ (this.bkgCrossfaderImg1.nativeElement));
        this.img2 = (/** @type {?} */ (this.bkgCrossfaderImg2.nativeElement));
        this.div.style.backgroundColor = this.backgroundColor;
        this.img1.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
        this.img1.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
        this.img2.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
        this.img2.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.idle();
        }), this.initDelayMS);
    };
    /**
     * @private
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.idle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.autoAdvance) {
                _this.transition();
            }
            else {
                _this.idle();
            }
        }), this.idleTimeMS);
    };
    /**
     * @private
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.transition = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.imageSources.length > 1) {
            if (this.img1.classList.contains('ngx-img-crossfader-transparent')) {
                this.img1Num = (this.img2Num + 1) % this.imageSources.length;
            }
            else {
                this.img2Num = (this.img1Num + 1) % this.imageSources.length;
            }
            this.img1.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.classList.toggle('ngx-img-crossfader-transparent');
            this.img2.classList.toggle('ngx-img-crossfader-transparent');
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.idle();
            }), this.transitionTimeMS);
        }
    };
    /**
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.stepForward = /**
     * @return {?}
     */
    function () {
        if (this.imageSources.length > 1) {
            if (this.img1.classList.contains('ngx-img-crossfader-transparent')) {
                this.img1Num = (this.img2Num + 1) % this.imageSources.length;
            }
            else {
                this.img2Num = (this.img1Num + 1) % this.imageSources.length;
            }
            this.img1.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.classList.toggle('ngx-img-crossfader-transparent');
            this.img2.classList.toggle('ngx-img-crossfader-transparent');
        }
    };
    /**
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.stepBackward = /**
     * @return {?}
     */
    function () {
        if (this.imageSources.length > 1) {
            if (this.img1.classList.contains('ngx-img-crossfader-transparent')) {
                this.img1Num = (this.img2Num - 1 + this.imageSources.length) % this.imageSources.length;
            }
            else {
                this.img2Num = (this.img1Num - 1 + this.imageSources.length) % this.imageSources.length;
            }
            this.img1.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.transitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img2.style.webkitTransitionDuration = this.transitionTimeMS.toString() + 'ms';
            this.img1.classList.toggle('ngx-img-crossfader-transparent');
            this.img2.classList.toggle('ngx-img-crossfader-transparent');
        }
    };
    /**
     * @param {?} imgNum
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.getSrc = /**
     * @param {?} imgNum
     * @return {?}
     */
    function (imgNum) {
        if (imgNum < this.imageSources.length) {
            return this.imageSources[imgNum];
        }
        else {
            if (this.imageSources.length) {
                return this.imageSources[0];
            }
            else {
                return null;
            }
        }
    };
    /**
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.getImg1Num = /**
     * @return {?}
     */
    function () { return this.img1Num; };
    /**
     * @return {?}
     */
    NgxImgCrossfaderComponent.prototype.getImg2Num = /**
     * @return {?}
     */
    function () { return this.img2Num; };
    NgxImgCrossfaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-img-crossfader',
                    template: "\n    <div class=\"ngx-img-crossfader-div\" #bkgCrossfaderDiv>\n      <img class=\"ngx-img-crossfader-img\" [src]=\"getSrc(getImg1Num())\" #bkgCrossfaderImg1>\n      <img class=\"ngx-img-crossfader-img ngx-img-crossfader-transparent\" [src]=\"getSrc(getImg2Num())\" #bkgCrossfaderImg2>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgxImgCrossfaderComponent.ctorParameters = function () { return []; };
    NgxImgCrossfaderComponent.propDecorators = {
        initDelayMS: [{ type: Input }],
        idleTimeMS: [{ type: Input }],
        transitionTimeMS: [{ type: Input }],
        autoAdvance: [{ type: Input }],
        imageSources: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        bkgCrossfaderDiv: [{ type: ViewChild, args: ['bkgCrossfaderDiv',] }],
        bkgCrossfaderImg1: [{ type: ViewChild, args: ['bkgCrossfaderImg1',] }],
        bkgCrossfaderImg2: [{ type: ViewChild, args: ['bkgCrossfaderImg2',] }]
    };
    return NgxImgCrossfaderComponent;
}());
export { NgxImgCrossfaderComponent };
if (false) {
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.initDelayMS;
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.idleTimeMS;
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.transitionTimeMS;
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.autoAdvance;
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.imageSources;
    /** @type {?} */
    NgxImgCrossfaderComponent.prototype.backgroundColor;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.bkgCrossfaderDiv;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.bkgCrossfaderImg1;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.bkgCrossfaderImg2;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.div;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.img1;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.img2;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.img1Num;
    /**
     * @type {?}
     * @private
     */
    NgxImgCrossfaderComponent.prototype.img2Num;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy1jcm9zc2ZhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbWctY3Jvc3NmYWRlci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW1nLWNyb3NzZmFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEU7SUE2QkU7UUFqQlMsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsZUFBVSxHQUFXLElBQUksQ0FBQztRQUMxQixxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFDaEMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsaUJBQVksR0FBa0IsRUFBRSxDQUFDO1FBQ2pDLG9CQUFlLEdBQVcsaUJBQWlCLENBQUM7UUFTN0MsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUNwQixZQUFPLEdBQVcsQ0FBQyxDQUFDO0lBRVosQ0FBQzs7OztJQUVqQiw0Q0FBUTs7O0lBQVI7UUFBQSxpQkFhQztRQVpDLElBQUksQ0FBQyxHQUFHLEdBQUcsbUJBQWdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUEsQ0FBQztRQUMvRCxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFrQixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFBLENBQUM7UUFDbkUsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBa0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBQSxDQUFDO1FBRW5FLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsR0FBRSxJQUFJLENBQUM7UUFDNUUsSUFBSSxDQUFDLElBQUksQ0FBQyxL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SUFBSSxDQUFDO2FBQ2I7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCw4Q0FBVTs7O0lBQVYsY0FBc0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQzs7OztJQUMxQyw4Q0FBVTs7O0lBQVYsY0FBc0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQzs7Z0JBeEgzQyxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLCtTQUtUO2lCQUVGOzs7Ozs4QkFHRSxLQUFLOzZCQUNMLEtBQUs7bUNBQ0wsS0FBSzs4QkFDTCxLQUFLOytCQUNMLEtBQUs7a0NBQ0wsS0FBSzttQ0FFTCxTQUFTLFNBQUMsa0JBQWtCO29DQUM1QixTQUFTLFNBQUMsbUJBQW1CO29DQUM3QixTQUFTLFNBQUMsbUJBQW1COztJQXFHaEMsZ0NBQUM7Q0FBQSxBQTFIRCxJQTBIQztTQWhIWSx5QkFBeUI7OztJQUVwQyxnREFBaUM7O0lBQ2pDLCtDQUFtQzs7SUFDbkMscURBQXlDOztJQUN6QyxnREFBcUM7O0lBQ3JDLGlEQUEwQzs7SUFDMUMsb0RBQXFEOzs7OztJQUVyRCxxREFBd0Q7Ozs7O0lBQ3hELHNEQUEwRDs7Ozs7SUFDMUQsc0RBQTBEOzs7OztJQUUxRCx3Q0FBNEI7Ozs7O0lBQzVCLHlDQUErQjs7Ozs7SUFDL0IseUNBQStCOzs7OztJQUMvQiw0Q0FBNEI7Ozs7O0lBQzVCLDRDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1pbWctY3Jvc3NmYWRlcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJuZ3gtaW1nLWNyb3NzZmFkZXItZGl2XCIgI2JrZ0Nyb3NzZmFkZXJEaXY+XHJcbiAgICAgIDxpbWcgY2xhc3M9XCJuZ3gtaW1nLWNyb3NzZmFkZXItaW1nXCIgW3NyY109XCJnZXRTcmMoZ2V0SW1nMU51bSgpKVwiICNia2dDcm9zc2ZhZGVySW1nMT5cclxuICAgICAgPGltZyBjbGFzcz1cIm5neC1pbWctY3Jvc3NmYWRlci1pbWcgbmd4LWltZy1jcm9zc2ZhZGVyLXRyYW5zcGFyZW50XCIgW3NyY109XCJnZXRTcmMoZ2V0SW1nMk51bSgpKVwiICNia2dDcm9zc2ZhZGVySW1nMj5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4SW1nQ3Jvc3NmYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIGluaXREZWxheU1TOiBudW1iZXIgPSAwO1xyXG4gIEBJbnB1dCgpIGlkbGVUaW1lTVM6IG51bWJlciA9IDUwMDA7XHJcbiAgQElucHV0KCkgdHJhbnNpdGlvblRpbWVNUzogbnVtYmVyID0gMTAwMDtcclxuICBASW5wdXQoKSBhdXRvQWR2YW5jZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgQElucHV0KCkgaW1hZ2VTb3VyY2VzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgQElucHV0KCkgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcgPSAncmdiYSgwLDAsMCwxLjApJztcclxuICBcclxuICBAVmlld0NoaWxkKCdia2dDcm9zc2ZhZGVyRGl2JykgcHJpdmF0ZSBia2dDcm9zc2ZhZGVyRGl2O1xyXG4gIEBWaWV3Q2hpbGQoJ2JrZ0Nyb3NzZmFkZXJJbWcxJykgcHJpdmF0ZSBia2dDcm9zc2ZhZGVySW1nMTtcclxuICBAVmlld0NoaWxkKCdia2dDcm9zc2ZhZGVySW1nMicpIHByaXZhdGUgYmtnQ3Jvc3NmYWRlckltZzI7XHJcblxyXG4gIHByaXZhdGUgZGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICBwcml2YXRlIGltZzE6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBpbWcyOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gIHByaXZhdGUgaW1nMU51bTogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIGltZzJOdW06IG51bWJlciA9IDE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5kaXYgPSA8SFRNTERpdkVsZW1lbnQ+dGhpcy5ia2dDcm9zc2ZhZGVyRGl2Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLmltZzEgPSA8SFRNTEltYWdlRWxlbWVudD50aGlzLmJrZ0Nyb3NzZmFkZXJJbWcxLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLmltZzIgPSA8SFRNTEltYWdlRWxlbWVudD50aGlzLmJrZ0Nyb3NzZmFkZXJJbWcyLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5kaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICB0aGlzLmltZzEuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICB0aGlzLmltZzEuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICB0aGlzLmltZzIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICB0aGlzLmltZzIuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7ICAgIFxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuaWRsZSgpO1xyXG4gICAgfSwgdGhpcy5pbml0RGVsYXlNUyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlkbGUoKTogdm9pZCB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuYXV0b0FkdmFuY2UpIHtcclxuICAgICAgICB0aGlzLnRyYW5zaXRpb24oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmlkbGUoKTtcclxuICAgICAgfVxyXG4gICAgfSwgdGhpcy5pZGxlVGltZU1TKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdHJhbnNpdGlvbigpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmltYWdlU291cmNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIGlmICh0aGlzLmltZzEuY2xhc3NMaXN0LmNvbnRhaW5zKCduZ3gtaW1nLWNyb3NzZmFkZXItdHJhbnNwYXJlbnQnKSkge1xyXG4gICAgICAgIHRoaXMuaW1nMU51bSA9ICh0aGlzLmltZzJOdW0gKyAxKSAlIHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmltZzJOdW0gPSAodGhpcy5pbWcxTnVtICsgMSkgJSB0aGlzLmltYWdlU291cmNlcy5sZW5ndGg7XHJcbiAgICAgIH0gICAgICBcclxuICAgICAgdGhpcy5pbWcxLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMudHJhbnNpdGlvblRpbWVNUy50b1N0cmluZygpICsnbXMnO1xyXG4gICAgICB0aGlzLmltZzEuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICAgIHRoaXMuaW1nMi5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLnRyYW5zaXRpb25UaW1lTVMudG9TdHJpbmcoKSArJ21zJztcclxuICAgICAgdGhpcy5pbWcyLnN0eWxlLndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMudHJhbnNpdGlvblRpbWVNUy50b1N0cmluZygpICsnbXMnO1xyXG4gICAgICB0aGlzLmltZzEuY2xhc3NMaXN0LnRvZ2dsZSgnbmd4LWltZy1jcm9zc2ZhZGVyLXRyYW5zcGFyZW50Jyk7XHJcbiAgICAgIHRoaXMuaW1nMi5jbGFzc0xpc3QudG9nZ2xlKCduZ3gtaW1nLWNyb3NzZmFkZXItdHJhbnNwYXJlbnQnKTsgICAgICBcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pZGxlKCk7XHJcbiAgICAgIH0sIHRoaXMudHJhbnNpdGlvblRpbWVNUyk7ICAgICBcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0ZXBGb3J3YXJkKCkge1xyXG4gICAgaWYgKHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWYgKHRoaXMuaW1nMS5jbGFzc0xpc3QuY29udGFpbnMoJ25neC1pbWctY3Jvc3NmYWRlci10cmFuc3BhcmVudCcpKSB7XHJcbiAgICAgICAgdGhpcy5pbWcxTnVtID0gKHRoaXMuaW1nMk51bSArIDEpICUgdGhpcy5pbWFnZVNvdXJjZXMubGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW1nMk51bSA9ICh0aGlzLmltZzFOdW0gKyAxKSAlIHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aDtcclxuICAgICAgfSAgICAgIFxyXG4gICAgICB0aGlzLmltZzEuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICAgIHRoaXMuaW1nMS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLnRyYW5zaXRpb25UaW1lTVMudG9TdHJpbmcoKSArJ21zJztcclxuICAgICAgdGhpcy5pbWcyLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMudHJhbnNpdGlvblRpbWVNUy50b1N0cmluZygpICsnbXMnO1xyXG4gICAgICB0aGlzLmltZzIuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICAgIHRoaXMuaW1nMS5jbGFzc0xpc3QudG9nZ2xlKCduZ3gtaW1nLWNyb3NzZmFkZXItdHJhbnNwYXJlbnQnKTtcclxuICAgICAgdGhpcy5pbWcyLmNsYXNzTGlzdC50b2dnbGUoJ25neC1pbWctY3Jvc3NmYWRlci10cmFuc3BhcmVudCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RlcEJhY2t3YXJkKCkge1xyXG4gICAgaWYgKHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWYgKHRoaXMuaW1nMS5jbGFzc0xpc3QuY29udGFpbnMoJ25neC1pbWctY3Jvc3NmYWRlci10cmFuc3BhcmVudCcpKSB7XHJcbiAgICAgICAgdGhpcy5pbWcxTnVtID0gKHRoaXMuaW1nMk51bSAtIDEgKyB0aGlzLmltYWdlU291cmNlcy5sZW5ndGgpICUgdGhpcy5pbWFnZVNvdXJjZXMubGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW1nMk51bSA9ICh0aGlzLmltZzFOdW0gLSAxICArIHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aCkgJSB0aGlzLmltYWdlU291cmNlcy5sZW5ndGg7XHJcbiAgICAgIH0gICAgICBcclxuICAgICAgdGhpcy5pbWcxLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMudHJhbnNpdGlvblRpbWVNUy50b1N0cmluZygpICsnbXMnO1xyXG4gICAgICB0aGlzLmltZzEuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy50cmFuc2l0aW9uVGltZU1TLnRvU3RyaW5nKCkgKydtcyc7XHJcbiAgICAgIHRoaXMuaW1nMi5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLnRyYW5zaXRpb25UaW1lTVMudG9TdHJpbmcoKSArJ21zJztcclxuICAgICAgdGhpcy5pbWcyLnN0eWxlLndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMudHJhbnNpdGlvblRpbWVNUy50b1N0cmluZygpICsnbXMnO1xyXG4gICAgICB0aGlzLmltZzEuY2xhc3NMaXN0LnRvZ2dsZSgnbmd4LWltZy1jcm9zc2ZhZGVyLXRyYW5zcGFyZW50Jyk7XHJcbiAgICAgIHRoaXMuaW1nMi5jbGFzc0xpc3QudG9nZ2xlKCduZ3gtaW1nLWNyb3NzZmFkZXItdHJhbnNwYXJlbnQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNyYyhpbWdOdW06IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBpZiAoaW1nTnVtIDwgdGhpcy5pbWFnZVNvdXJjZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmltYWdlU291cmNlc1tpbWdOdW1dO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuaW1hZ2VTb3VyY2VzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlU291cmNlc1swXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0SW1nMU51bSgpOiBudW1iZXIge3JldHVybiB0aGlzLmltZzFOdW19XHJcbiAgZ2V0SW1nMk51bSgpOiBudW1iZXIge3JldHVybiB0aGlzLmltZzJOdW19XHJcblxyXG59XHJcbiJdfQ==